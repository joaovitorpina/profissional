// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Profissional.Infrastructure.Data;

#nullable disable

namespace Profissional.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ProfissionalContext))]
    partial class ProfissionalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EspecialidadeProfissional", b =>
                {
                    b.Property<int>("EspecialidadesId")
                        .HasColumnType("int")
                        .HasColumnName("especialidades_id");

                    b.Property<int>("ProfissionaisId")
                        .HasColumnType("int")
                        .HasColumnName("profissionais_id");

                    b.HasKey("EspecialidadesId", "ProfissionaisId")
                        .HasName("pk_especialidade_profissional");

                    b.HasIndex("ProfissionaisId")
                        .HasDatabaseName("ix_especialidade_profissional_profissionais_id");

                    b.ToTable("especialidade_profissional", (string)null);
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Midias.MidiaAbstract", b =>
                {
                    b.Property<string>("Titulo")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("titulo");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("discriminator");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_id");

                    b.Property<int>("_tipoMidiaId")
                        .HasColumnType("int")
                        .HasColumnName("_tipo_midia_id");

                    b.HasKey("Titulo", "Url")
                        .HasName("pk_midias");

                    b.HasIndex("ProfissionalId")
                        .HasDatabaseName("ix_midias_profissional_id");

                    b.HasIndex("_tipoMidiaId")
                        .HasDatabaseName("ix_midias__tipo_midia_id");

                    b.ToTable("midias", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("MidiaAbstract");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Midias.TipoMidia", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tipos_midia");

                    b.ToTable("tipos_midia", (string)null);
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Profissional.Profissional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long?>("Celular")
                        .HasColumnType("bigint")
                        .HasColumnName("celular");

                    b.Property<string>("Conselho")
                        .HasColumnType("longtext")
                        .HasColumnName("conselho");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Facebook")
                        .HasColumnType("longtext")
                        .HasColumnName("facebook");

                    b.Property<string>("ImagemUrlPerfil")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("imagem_url_perfil");

                    b.Property<string>("Instagram")
                        .HasColumnType("longtext")
                        .HasColumnName("instagram");

                    b.Property<string>("Linkedin")
                        .HasColumnType("longtext")
                        .HasColumnName("linkedin");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("NumeroIdentificacao")
                        .HasColumnType("longtext")
                        .HasColumnName("numero_identificacao");

                    b.Property<bool>("Recomendado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recomendado");

                    b.Property<string>("Site")
                        .HasColumnType("longtext")
                        .HasColumnName("site");

                    b.Property<string>("Sobre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sobre");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<long?>("Telefone")
                        .HasColumnType("bigint")
                        .HasColumnName("telefone");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int")
                        .HasColumnName("unidade_id");

                    b.Property<string>("UrlAmigavel")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url_amigavel");

                    b.Property<string>("Youtube")
                        .HasColumnType("longtext")
                        .HasColumnName("youtube");

                    b.Property<int>("tipo_profissional_id")
                        .HasColumnType("int")
                        .HasColumnName("tipo_profissional_id");

                    b.HasKey("Id")
                        .HasName("pk_profissionais");

                    b.HasIndex("tipo_profissional_id")
                        .HasDatabaseName("ix_profissionais_tipo_profissional_id");

                    b.ToTable("profissionais", (string)null);
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.TipoProfissional.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.Property<int>("tipoProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_profissional_id");

                    b.HasKey("Id")
                        .HasName("pk_especialidades");

                    b.HasIndex("tipoProfissionalId")
                        .HasDatabaseName("ix_especialidades_tipo_profissional_id");

                    b.ToTable("especialidades", (string)null);
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.TipoProfissional.TipoProfissional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.HasKey("Id")
                        .HasName("pk_tipos_profissional");

                    b.ToTable("tipos_profissional", (string)null);
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Midias.Imagem", b =>
                {
                    b.HasBaseType("Profissional.Domain.Aggregates.Midias.MidiaAbstract");

                    b.HasDiscriminator().HasValue("Imagem");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Midias.Podcast", b =>
                {
                    b.HasBaseType("Profissional.Domain.Aggregates.Midias.MidiaAbstract");

                    b.HasDiscriminator().HasValue("Podcast");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Midias.Video", b =>
                {
                    b.HasBaseType("Profissional.Domain.Aggregates.Midias.MidiaAbstract");

                    b.Property<string>("UrlThumbnail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url_thumbnail");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("EspecialidadeProfissional", b =>
                {
                    b.HasOne("Profissional.Domain.Aggregates.TipoProfissional.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_especialidade_profissional_especialidades_especialidades_id");

                    b.HasOne("Profissional.Domain.Aggregates.Profissional.Profissional", null)
                        .WithMany()
                        .HasForeignKey("ProfissionaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_especialidade_profissional_profissionais_profissionais_id");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Midias.MidiaAbstract", b =>
                {
                    b.HasOne("Profissional.Domain.Aggregates.Profissional.Profissional", null)
                        .WithMany("Midias")
                        .HasForeignKey("ProfissionalId")
                        .HasConstraintName("fk_midias_profissionais_profissional_id");

                    b.HasOne("Profissional.Domain.Aggregates.Midias.TipoMidia", "TipoMidia")
                        .WithMany()
                        .HasForeignKey("_tipoMidiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_midias_tipos_midia_tipo_midia_temp_id");

                    b.Navigation("TipoMidia");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Profissional.Profissional", b =>
                {
                    b.HasOne("Profissional.Domain.Aggregates.TipoProfissional.TipoProfissional", "TipoProfissional")
                        .WithMany()
                        .HasForeignKey("tipo_profissional_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profissionais_tipos_profissional_tipo_profissional_id");

                    b.OwnsMany("Profissional.Domain.Aggregates.Profissional.Convenio", "Convenios", b1 =>
                        {
                            b1.Property<int>("ProfissionalId")
                                .HasColumnType("int")
                                .HasColumnName("profissional_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("descricao");

                            b1.HasKey("ProfissionalId", "Id")
                                .HasName("pk_convenios");

                            b1.ToTable("convenios", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfissionalId")
                                .HasConstraintName("fk_convenios_profissionais_profissional_id");
                        });

                    b.OwnsOne("Profissional.Domain.Aggregates.Profissional.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("ProfissionalId")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Bairro")
                                .HasColumnType("longtext")
                                .HasColumnName("endereco_bairro");

                            b1.Property<long?>("Cep")
                                .HasColumnType("bigint")
                                .HasColumnName("endereco_cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("endereco_cidade");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("endereco_estado");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("longtext")
                                .HasColumnName("endereco_logradouro");

                            b1.Property<string>("Numero")
                                .HasColumnType("longtext")
                                .HasColumnName("endereco_numero");

                            b1.HasKey("ProfissionalId");

                            b1.ToTable("profissionais");

                            b1.WithOwner()
                                .HasForeignKey("ProfissionalId")
                                .HasConstraintName("fk_profissionais_profissionais_id");
                        });

                    b.OwnsMany("Profissional.Domain.Aggregates.Profissional.Tratamento", "Tratamentos", b1 =>
                        {
                            b1.Property<int>("ProfissionalId")
                                .HasColumnType("int")
                                .HasColumnName("profissional_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("descricao");

                            b1.HasKey("ProfissionalId", "Id")
                                .HasName("pk_tratamentos");

                            b1.ToTable("tratamentos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfissionalId")
                                .HasConstraintName("fk_tratamentos_profissionais_profissional_id");
                        });

                    b.OwnsMany("Profissional.Domain.Aggregates.Profissional.Whatsapp", "Whatsapps", b1 =>
                        {
                            b1.Property<int>("ProfissionalId")
                                .HasColumnType("int")
                                .HasColumnName("profissional_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<long>("Numero")
                                .HasColumnType("bigint")
                                .HasColumnName("numero");

                            b1.Property<bool>("Principal")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("principal");

                            b1.HasKey("ProfissionalId", "Id")
                                .HasName("pk_whatsapp");

                            b1.ToTable("whatsapp", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfissionalId")
                                .HasConstraintName("fk_whatsapp_profissionais_profissional_id");
                        });

                    b.Navigation("Convenios");

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("TipoProfissional");

                    b.Navigation("Tratamentos");

                    b.Navigation("Whatsapps");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.TipoProfissional.Especialidade", b =>
                {
                    b.HasOne("Profissional.Domain.Aggregates.TipoProfissional.TipoProfissional", null)
                        .WithMany("Especialidades")
                        .HasForeignKey("tipoProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_especialidades_tipos_profissional_tipo_profissional_id");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.Profissional.Profissional", b =>
                {
                    b.Navigation("Midias");
                });

            modelBuilder.Entity("Profissional.Domain.Aggregates.TipoProfissional.TipoProfissional", b =>
                {
                    b.Navigation("Especialidades");
                });
#pragma warning restore 612, 618
        }
    }
}
