// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Profissional.Infrastructure.Data;

#nullable disable

namespace Profissional.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ProfissionalContext))]
    [Migration("20220413020820_BancoInicial")]
    partial class BancoInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EspecialidadeProfissionalModel", b =>
                {
                    b.Property<int>("EspecialidadesId")
                        .HasColumnType("int")
                        .HasColumnName("especialidades_id");

                    b.Property<int>("ProfissionaisId")
                        .HasColumnType("int")
                        .HasColumnName("profissionais_id");

                    b.HasKey("EspecialidadesId", "ProfissionaisId")
                        .HasName("pk_especialidade_profissional_model");

                    b.HasIndex("ProfissionaisId")
                        .HasDatabaseName("ix_especialidade_profissional_model_profissionais_id");

                    b.ToTable("especialidade_profissional_model", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Convenio", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_id");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descricao");

                    b.Property<int>("ProfissionalModelId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_model_id");

                    b.HasKey("ProfissionalId", "Descricao")
                        .HasName("pk_convenios");

                    b.HasIndex("ProfissionalModelId")
                        .HasDatabaseName("ix_convenios_profissional_model_id");

                    b.ToTable("convenios", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Endereco", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_id");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("numero");

                    b.Property<long?>("Cep")
                        .HasColumnType("bigint")
                        .HasColumnName("cep");

                    b.Property<string>("Logradouro")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext")
                        .HasColumnName("bairro");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cidade");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.HasKey("ProfissionalId", "Numero", "Cep", "Logradouro")
                        .HasName("pk_enderecos");

                    b.HasIndex("ProfissionalId")
                        .IsUnique()
                        .HasDatabaseName("ix_enderecos_profissional_id");

                    b.ToTable("enderecos", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.Property<int>("TipoProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_profissional_id");

                    b.HasKey("Id")
                        .HasName("pk_especialidades");

                    b.HasIndex("TipoProfissionalId")
                        .HasDatabaseName("ix_especialidades_tipo_profissional_id");

                    b.ToTable("especialidades", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Midias.MidiaAbstract", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_id");

                    b.Property<string>("Titulo")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("titulo");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.Property<int>("TipoMidia")
                        .HasColumnType("int")
                        .HasColumnName("tipo_midia");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("discriminator");

                    b.Property<int>("ProfissionalModelId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_model_id");

                    b.HasKey("ProfissionalId", "Titulo", "Url", "TipoMidia")
                        .HasName("pk_midias");

                    b.HasIndex("ProfissionalModelId")
                        .HasDatabaseName("ix_midias_profissional_model_id");

                    b.ToTable("midias", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("MidiaAbstract");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.ProfissionalModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long?>("Celular")
                        .HasColumnType("bigint")
                        .HasColumnName("celular");

                    b.Property<string>("Conselho")
                        .HasColumnType("longtext")
                        .HasColumnName("conselho");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Facebook")
                        .HasColumnType("longtext")
                        .HasColumnName("facebook");

                    b.Property<string>("ImagemUrlPerfil")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("imagem_url_perfil");

                    b.Property<string>("Instagram")
                        .HasColumnType("longtext")
                        .HasColumnName("instagram");

                    b.Property<string>("Linkedin")
                        .HasColumnType("longtext")
                        .HasColumnName("linkedin");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("NumeroIdentificacao")
                        .HasColumnType("longtext")
                        .HasColumnName("numero_identificacao");

                    b.Property<bool>("Recomendado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recomendado");

                    b.Property<string>("Site")
                        .HasColumnType("longtext")
                        .HasColumnName("site");

                    b.Property<string>("Sobre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sobre");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<long?>("Telefone")
                        .HasColumnType("bigint")
                        .HasColumnName("telefone");

                    b.Property<int>("TipoProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_profissional_id");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int")
                        .HasColumnName("unidade_id");

                    b.Property<string>("UrlAmigavel")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url_amigavel");

                    b.Property<string>("Youtube")
                        .HasColumnType("longtext")
                        .HasColumnName("youtube");

                    b.HasKey("Id")
                        .HasName("pk_profissionais");

                    b.HasIndex("TipoProfissionalId")
                        .HasDatabaseName("ix_profissionais_tipo_profissional_id");

                    b.ToTable("profissionais", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.TipoProfissional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.HasKey("Id")
                        .HasName("pk_tipos_profissional");

                    b.ToTable("tipos_profissional", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Tratamento", b =>
                {
                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descricao");

                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_id");

                    b.Property<int>("ProfissionalModelId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_model_id");

                    b.HasKey("Descricao", "ProfissionalId")
                        .HasName("pk_tratamentos");

                    b.HasIndex("ProfissionalModelId")
                        .HasDatabaseName("ix_tratamentos_profissional_model_id");

                    b.ToTable("tratamentos", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Whatsapp", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_id");

                    b.Property<bool>("Principal")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("principal");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint")
                        .HasColumnName("numero");

                    b.Property<int>("ProfissionalModelId")
                        .HasColumnType("int")
                        .HasColumnName("profissional_model_id");

                    b.HasKey("ProfissionalId", "Principal", "Numero")
                        .HasName("pk_whatsapps");

                    b.HasIndex("ProfissionalModelId")
                        .HasDatabaseName("ix_whatsapps_profissional_model_id");

                    b.ToTable("whatsapps", (string)null);
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Midias.Imagem", b =>
                {
                    b.HasBaseType("Profissional.Infrastructure.Data.Models.Midias.MidiaAbstract");

                    b.HasDiscriminator().HasValue("Imagem");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Midias.Podcast", b =>
                {
                    b.HasBaseType("Profissional.Infrastructure.Data.Models.Midias.MidiaAbstract");

                    b.HasDiscriminator().HasValue("Podcast");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Midias.Video", b =>
                {
                    b.HasBaseType("Profissional.Infrastructure.Data.Models.Midias.MidiaAbstract");

                    b.Property<string>("UrlThumbnail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url_thumbnail");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("EspecialidadeProfissionalModel", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_especialidade_profissional_model_especialidades_especialidad");

                    b.HasOne("Profissional.Infrastructure.Data.Models.ProfissionalModel", null)
                        .WithMany()
                        .HasForeignKey("ProfissionaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_especialidade_profissional_model_profissionais_profissionais");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Convenio", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.ProfissionalModel", "ProfissionalModel")
                        .WithMany("Convenios")
                        .HasForeignKey("ProfissionalModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_convenios_profissionais_profissional_model_id");

                    b.Navigation("ProfissionalModel");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Endereco", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.ProfissionalModel", "ProfissionalModel")
                        .WithOne("Endereco")
                        .HasForeignKey("Profissional.Infrastructure.Data.Models.Endereco", "ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enderecos_profissionais_profissional_model_id");

                    b.Navigation("ProfissionalModel");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Especialidade", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.TipoProfissional", "TipoProfissional")
                        .WithMany("Especialidades")
                        .HasForeignKey("TipoProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_especialidades_tipos_profissional_tipo_profissional_id");

                    b.Navigation("TipoProfissional");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Midias.MidiaAbstract", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.ProfissionalModel", "ProfissionalModel")
                        .WithMany("Midias")
                        .HasForeignKey("ProfissionalModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_midias_profissionais_profissional_model_id");

                    b.Navigation("ProfissionalModel");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.ProfissionalModel", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.TipoProfissional", "TipoProfissional")
                        .WithMany()
                        .HasForeignKey("TipoProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profissionais_tipos_profissional_tipo_profissional_id");

                    b.Navigation("TipoProfissional");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Tratamento", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.ProfissionalModel", "ProfissionalModel")
                        .WithMany("Tratamentos")
                        .HasForeignKey("ProfissionalModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tratamentos_profissionais_profissional_model_id");

                    b.Navigation("ProfissionalModel");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.Whatsapp", b =>
                {
                    b.HasOne("Profissional.Infrastructure.Data.Models.ProfissionalModel", "ProfissionalModel")
                        .WithMany("Whatsapps")
                        .HasForeignKey("ProfissionalModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_whatsapps_profissionais_profissional_model_id");

                    b.Navigation("ProfissionalModel");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.ProfissionalModel", b =>
                {
                    b.Navigation("Convenios");

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Midias");

                    b.Navigation("Tratamentos");

                    b.Navigation("Whatsapps");
                });

            modelBuilder.Entity("Profissional.Infrastructure.Data.Models.TipoProfissional", b =>
                {
                    b.Navigation("Especialidades");
                });
#pragma warning restore 612, 618
        }
    }
}
